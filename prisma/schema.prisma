// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id String @id @default(uuid())
  username String @unique
  imageUrl String @db.Text
  externalUserId String @unique
  bio String? @db.Text

  following Follow[] @relation("Following")
  followedBy Follow[] @relation("FollowedBy")

  Gifted Gift[]

  stream Stream?

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt 
}

model Stream {
  id String @id @default(uuid())
  name String @db.Text
  thumbnailUrl String? @db.Text
  ingressId String? @unique
  serverUrl String? @db.Text
  streamKey String? @db.Text

  isLive Boolean @default(false)
  
  giftQueue Gift[]

  isPlaying Boolean @default(false)

  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([userId])
  @@index([ingressId])
}

model Follow {
  id String @id @default(uuid())
  followerId String
  followingId String

  follower User @relation(name: "Following", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation(name: "FollowedBy", fields:[followingId], references: [id], onDelete: Cascade)

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Gift {
  id String @id @default(uuid())
  
  streamId String 
  gifterId String
  giftTypeId String

  stream Stream @relation(fields: [streamId], references: [id], onDelete: Cascade)
  gifter User @relation(fields: [gifterId], references: [id], onDelete: Cascade)
  giftType GiftType @relation(fields: [giftTypeId], references: [id], onDelete: Cascade)

  createAt DateTime @default(now())


  @@index([streamId])
  @@index([gifterId])
  @@index([giftTypeId])
}

model GiftType {
  id String @id @default(uuid())
  name String @unique

  imageUrl String @db.Text

  gifts Gift[]
}

model Color {
  id String @id @default(uuid())
  name String @unique
  
  value String @unique

  imageUrl String @db.Text
}